// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createComment = `-- name: CreateComment :one
INSERT INTO "Comment" (
  "PostID", "Content", "TimePosted", "ID", "Username", "Points"
) VALUES (
  $1, $2, $3, $4, $5, 0
)
RETURNING "CommentID", "PostID", "Content", "TimePosted", "ID", "Username", "Points"
`

type CreateCommentParams struct {
	PostID     sql.NullInt32
	Content    sql.NullString
	TimePosted sql.NullTime
	ID         sql.NullInt32
	Username   sql.NullString
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.PostID,
		arg.Content,
		arg.TimePosted,
		arg.ID,
		arg.Username,
	)
	var i Comment
	err := row.Scan(
		&i.CommentID,
		&i.PostID,
		&i.Content,
		&i.TimePosted,
		&i.ID,
		&i.Username,
		&i.Points,
	)
	return i, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO "Post" (
  "Title", "Content", "TimePosted", "ID", "Category"
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING "PostID", "Title", "Content", "TimePosted", "ID", "Category"
`

type CreatePostParams struct {
	Title      sql.NullString
	Content    sql.NullString
	TimePosted sql.NullTime
	ID         sql.NullInt32
	Category   sql.NullString
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Title,
		arg.Content,
		arg.TimePosted,
		arg.ID,
		arg.Category,
	)
	var i Post
	err := row.Scan(
		&i.PostID,
		&i.Title,
		&i.Content,
		&i.TimePosted,
		&i.ID,
		&i.Category,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "User" (
  "ID", "Username", "PasswordKey"
) VALUES (
  $1, $2, $3
) RETURNING "Username"
`

type CreateUserParams struct {
	ID          int32
	Username    sql.NullString
	PasswordKey sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Username, arg.PasswordKey)
	var Username sql.NullString
	err := row.Scan(&Username)
	return Username, err
}

const downVote = `-- name: DownVote :one
UPDATE "Comment"
SET "Points" = "Points" - 1 
WHERE "CommentID" = $1
RETURNING "Points"
`

func (q *Queries) DownVote(ctx context.Context, commentid int32) (sql.NullInt32, error) {
	row := q.db.QueryRowContext(ctx, downVote, commentid)
	var Points sql.NullInt32
	err := row.Scan(&Points)
	return Points, err
}

const loadCategory = `-- name: LoadCategory :many
SELECT DISTINCT "Category" FROM "Post"
ORDER BY "TimePosted"
`

func (q *Queries) LoadCategory(ctx context.Context) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, loadCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var Category sql.NullString
		if err := rows.Scan(&Category); err != nil {
			return nil, err
		}
		items = append(items, Category)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const loadComments = `-- name: LoadComments :many
SELECT "Comment"."Content", "Comment"."TimePosted", "Comment"."Username", "Comment"."Points"
FROM "Comment"
JOIN "Post" ON "Comment"."PostID" = "Post"."PostID"
`

type LoadCommentsRow struct {
	Content    sql.NullString
	TimePosted sql.NullTime
	Username   sql.NullString
	Points     sql.NullInt32
}

func (q *Queries) LoadComments(ctx context.Context) ([]LoadCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, loadComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LoadCommentsRow
	for rows.Next() {
		var i LoadCommentsRow
		if err := rows.Scan(
			&i.Content,
			&i.TimePosted,
			&i.Username,
			&i.Points,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const loginUser = `-- name: LoginUser :one
SELECT "Username" FROM "User"
WHERE "Username" = $1 AND "PasswordKey" = $2
`

type LoginUserParams struct {
	Username    sql.NullString
	PasswordKey sql.NullString
}

func (q *Queries) LoginUser(ctx context.Context, arg LoginUserParams) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, loginUser, arg.Username, arg.PasswordKey)
	var Username sql.NullString
	err := row.Scan(&Username)
	return Username, err
}

const upVote = `-- name: UpVote :one
UPDATE "Comment"
SET "Points" = "Points" + 1 
WHERE "CommentID" = $1
RETURNING "Points"
`

func (q *Queries) UpVote(ctx context.Context, commentid int32) (sql.NullInt32, error) {
	row := q.db.QueryRowContext(ctx, upVote, commentid)
	var Points sql.NullInt32
	err := row.Scan(&Points)
	return Points, err
}
