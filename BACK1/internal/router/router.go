package router

import (
	"context"
	"database/sql"
	"log"
	"os"

	"github.com/LeonardYam/cvwo-gossip/backend/internal/database"
	"github.com/LeonardYam/cvwo-gossip/backend/internal/routes"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/cors"
	"github.com/go-chi/jwtauth/v5"
	"github.com/joho/godotenv"

	_ "github.com/lib/pq" // Used for side effects
)

func SetUp() chi.Router {
	r := chi.NewRouter()
	envErr := godotenv.Load() // Load environment variables
	ctx := context.Background()
	tokenAuth := jwtauth.New("HS256", []byte(os.Getenv("JWT_SECRET")), nil)
	db, err := sql.Open("postgres", os.Getenv("DATABASE_URI"))

	if envErr != nil {
		log.Fatalln(".env error!")
	}

	if err != nil {
		log.Fatalln("Database error!")
	}
	
	// Use queries generated by sqlc library
	queries := database.New(db)

	// Pass dependencies to a Server struct
	server := routes.NewServer(queries, ctx, tokenAuth)

	// Basic CORS middleware from go-chi	
	r.Use(cors.Handler(cors.Options{
		AllowedOrigins:   []string{"https://*", "http://*"},
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: false,
		MaxAge:           300,
	  }))

	// Use standard logger provided by go-chi
	r.Use(middleware.Logger)

	// Mounting API routes
	r.Route("/api", server.GetAPIRoutes())
	return r
}